@using System.Collections
@model EuCorro.MVC.Site.ViewModels.CadastroViewModel

@{
    ViewBag.Title = "Cadastro de Atletas";
    Layout = "~/Areas/Clientes/Views/Shared/_Layout.cshtml";
    @Styles.Render("~/jasny-bootstrap/css")
    var imgSrc = Url.Content("~/Uploads/Atletas/Anonymous.png");
}

<div class="container box box-body" style="background-color: white">
    <h4 class="subtitle">Cadastro de Atletas</h4>
    <h6>Você está a poucos passos de concluir seu cadastro</h6>
    <hr />
    @using (Html.BeginForm("Create", "Cadastro", FormMethod.Post, new { @id = "form-wizard", enctype = "multipart/form-data" }))
    {
        @Html.AntiForgeryToken()

        <div class="form-horizontal">
            @Html.ValidationSummary(true, "", new { @class = "text-danger" })

            <div id="wizard">
                <h3>Login de Acesso ao Sistema</h3>
                <section>
                    <div class="form-group">
                        @Html.LabelFor(model => model.Email, htmlAttributes: new { @class = "control-label col-md-3" })
                        <div class="col-md-9">
                            @Html.EditorFor(model => model.Email, new { htmlAttributes = new { @class = "form-control", onkeyup = "this.value = Trim( this.value )" } })
                            @Html.ValidationMessageFor(model => model.Email, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.Senha, htmlAttributes: new { @class = "control-label col-md-3", onkeyup = "this.value = Trim( this.value )" })
                        <div class="col-md-9">
                            @Html.EditorFor(model => model.Senha, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.Senha, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="form-group">
                        <label class="col-md-3 control-label" for="confirmasenha">Confirma Senha</label>
                        <div class="col-md-9">
                            <input type="password" class="form-control" name="confirmasenha" id="confirmasenha">
                        </div>
                    </div>
                </section>

                <h3>Informações de Contato</h3>
                <section class="FixedContent">
                    <div class="form-group">
                        @Html.LabelFor(model => model.Nome, "Nome Completo", htmlAttributes: new { @class = "control-label col-md-3" })
                        <div class="col-md-9">
                            @Html.EditorFor(model => model.Nome, new { htmlAttributes = new { @class = "form-control textomaiusculo", @Title = "Entre com nome COMPLETO e sem ABREVEAÇÕES" } })
                            @Html.ValidationMessageFor(model => model.Nome, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.Brasileiro, htmlAttributes: new { @class = "control-label col-md-3" })
                        <div class="col-md-9">
                            @Html.EnumDropDownListFor(model => model.Brasileiro, null, new { @class = "form-control no-block" })
                            @Html.ValidationMessageFor(model => model.Brasileiro, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.Sexo, htmlAttributes: new { @class = "control-label col-md-3" })
                        <div class="col-md-9">
                            @Html.EnumDropDownListFor(model => model.Sexo, null, new { @class = "form-control no-block" })
                            @Html.ValidationMessageFor(model => model.Sexo, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.DataNascimento, htmlAttributes: new { @class = "control-label col-md-3" })
                        <div class="col-md-9">
                            @Html.EditorFor(model => model.DataNascimento, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.DataNascimento, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.CPF, htmlAttributes: new { @class = "control-label col-md-3" })
                        <div class="col-md-9">
                            @Html.EditorFor(model => model.CPF, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.CPF, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.Foto, "Foto do Atleta", new { @class = "control-label col-md-3" })
                        <div class="col-md-9">
                            <div class="fileinput fileinput-new" data-provides="fileinput">
                                <div class="fileinput-preview thumbnail" data-trigger="fileinput" style="width: 280px; height: 230px;">
                                    <img src="@imgSrc" alt="...">
                                </div>
                                <div>
                                    <span class="btn btn-primary btn-file">
                                        <span class="fileinput-new">Procurar Foto</span>
                                        <span class="fileinput-exists">Alterar Foto</span>
                                        @Html.TextBoxFor(model => model.Foto, new { @type = "file", @class = "form-control", @accept = "image/x-png, image/gif, image/jpeg, image/jpg", @maxlength = "2000" })
                                        @Html.ValidationMessageFor(model => model.Foto)
                                    </span>
                                    <a href="#" class="btn btn-danger fileinput-exists" data-dismiss="fileinput">Remover Foto</a>
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.Camiseta, htmlAttributes: new { @class = "control-label col-md-3" })
                        <div class="col-md-9">
                            @Html.EnumDropDownListFor(model => model.Camiseta, null, new { @class = "form-control no-block" })
                            @Html.ValidationMessageFor(model => model.Camiseta, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.Endereco, htmlAttributes: new { @class = "control-label col-md-3" })
                        <div class="col-md-9">
                            @Html.EditorFor(model => model.Endereco, new { htmlAttributes = new { @class = "form-control textomaiusculo" } })
                            @Html.ValidationMessageFor(model => model.Endereco, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.Numero, htmlAttributes: new { @class = "control-label col-md-3" })
                        <div class="col-md-9">
                            @Html.EditorFor(model => model.Numero, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.Numero, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.Complemento, htmlAttributes: new { @class = "control-label col-md-3" })
                        <div class="col-md-9">
                            @Html.EditorFor(model => model.Complemento, new { htmlAttributes = new { @class = "form-control textomaiusculo" } })
                            @Html.ValidationMessageFor(model => model.Complemento, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.Bairro, htmlAttributes: new { @class = "control-label col-md-3" })
                        <div class="col-md-9">
                            @Html.EditorFor(model => model.Bairro, new { htmlAttributes = new { @class = "form-control textomaiusculo" } })
                            @Html.ValidationMessageFor(model => model.Bairro, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.CEP, htmlAttributes: new { @class = "control-label col-md-3" })
                        <div class="col-md-9">
                            @Html.EditorFor(model => model.CEP, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.CEP, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.EstadoId, htmlAttributes: new { @class = "control-label col-md-3" })
                        <div class="col-md-9">
                            @Html.DropDownListFor(model => model.EstadoId, new SelectList(ViewBag.Estado as IEnumerable, "EstadoId", "Nome"), "Selecione o Estado...", new { @id = "ddlEstados", @class = "form-control" })
                            @Html.ValidationMessageFor(model => model.EstadoId, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.CidadeId, htmlAttributes: new { @class = "control-label col-md-3" })
                        <div class="col-md-9">
                            @Html.DropDownListFor(model => model.CidadeId, Enumerable.Empty<SelectListItem>(), "Selecione a Cidade...", new { @id = "ddlCidades", @class = "form-control" })
                            @Html.ValidationMessageFor(model => model.CidadeId, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.Contato, htmlAttributes: new { @class = "control-label col-md-3" })
                        <div class="col-md-9">
                            @Html.EditorFor(model => model.Contato, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.Contato, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.FoneContato, htmlAttributes: new { @class = "control-label col-md-3" })
                        <div class="col-md-9">
                            @Html.EditorFor(model => model.FoneContato, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.FoneContato, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.Telefone, htmlAttributes: new { @class = "control-label col-md-3" })
                        <div class="col-md-9">
                            @Html.EditorFor(model => model.Telefone, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.Telefone, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.Celular, htmlAttributes: new { @class = "control-label col-md-3" })
                        <div class="col-md-9">
                            @Html.EditorFor(model => model.Celular, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.Celular, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.WhatsApp, htmlAttributes: new { @class = "control-label col-md-3" })
                        <div class="col-md-9">
                            @Html.EditorFor(model => model.WhatsApp, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.WhatsApp, "", new { @class = "text-danger" })
                        </div>
                    </div>
                </section>

                <h3>Termos de Uso</h3>
                <section>
                    <textarea class="form-control text-justify" style="height: 90%; width: 90%;" rows="15">
                        Termo de uso aqui!
                    </textarea>
                    <input id="termosuso" name="termosuso" type="checkbox">
                    <label for="termosuso">Li a aceito os termos e condições.</label>
                </section>
            </div>
        </div>
    }

    <div id="div-conclusao" class="alert alert-success" style="display: none;">
        Seja bem-vindo,&nbsp;<strong><label id="div-conclusao-nome"></label></strong>!
    </div>
</div>

<style>
    .erro {
        border-color: #b92c28 !important;
    }
</style>


@section Scripts {
    @*<link href="~/Content/jquery.steps.css" rel="stylesheet" />
        <script src="~/Scripts/jquery.steps.js"></script>
        <script src="~/Scripts/jasny-bootstrap.min.js"></script>*@

    @Scripts.Render("~/bundles/jqueryval")
    @Styles.Render("~/Content/jquerysteps")
    @Scripts.Render("~/bundles/inputmask")
    @Scripts.Render("~/bundles/jquerysteps")
    @Scripts.Render("~/mvcajax/js")
    @Scripts.Render("~/jasny-bootstrap/js")

    @*<link href="~/Content/jquery.steps.css" rel="stylesheet" />
        <script src="~/Scripts/jquery.validate.js"></script>
        <script src="~/Scripts/jquery.mask.js"></script>
        <script src="~/Scripts/MyJS/example.js"></script>
        <script src="~/Scripts/MyJS/methods_pt.js"></script>
        <script src="~/Scripts/jquery.validate.unobtrusive.js"></script>
        <script src="~/Scripts/jquery.steps.js"></script>*@

    <script>

        $(document).ready(function () {

            var masks = ['(00) 00000-0000', '(00) 0000-00009'];

            //Código para contornar o conflito do jquery mask com o jquery validate
            $(function () {

                $("#Telefone").mask(masks[1], {
                    onKeyPress: function (val, e, field, options) {
                        field.mask(val.length > 14 ? masks[0] : masks[1], options);
                    }
                });
                $("#FoneContato").mask(masks[1], {
                    onKeyPress: function (val, e, field, options) {
                        field.mask(val.length > 14 ? masks[0] : masks[1], options);
                    }
                });
                $("#Celular").mask(masks[1], {
                    onKeyPress: function (val, e, field, options) {
                        field.mask(val.length > 14 ? masks[0] : masks[1], options);
                    }
                });
                $("#WhatsApp").mask(masks[1], {
                    onKeyPress: function (val, e, field, options) {
                        field.mask(val.length > 14 ? masks[0] : masks[1], options);
                    }
                });

                $("#CPF").mask("999.999.999-99");
                $("#CEP").mask("99.999-999");
                $("#DataNascimento").mask("99/99/9999");

                $("#ddlEstados").on("change", function () {
                    var estadoId = $(this).val();
                    //var url = '@Url.Action("LoadCidadeId", "Account")';
                    var url = '/Cadastro/LoadCidadeId/';
                    $.getJSON(url, { estadoId: estadoId },
                        function (estadosData) {
                            $("#ddlCidades :gt(0)").remove();
                            var select = $("#ddlCidades");
                            select.attr('disabled', false);
                            select.empty();
                            select.append($('<option/>', {
                                value: 0,
                                text: "Selecione a Cidade... "
                            }));
                            $.each(estadosData, function (index, itemData) {
                                //alert(estadosData);
                                //alert(itemData);
                                select.append($('<option/>', {
                                    value: itemData.Value,
                                    text: itemData.Text
                                }));
                            });
                        });
                });

            });

            $("#wizard").steps({
                headerTag: "h3",
                bodyTag: "section",
                transitionEffect: "slideLeft",
                stepsOrientation: "vertical",
                labels: {
                    cancel: "Cancelar",
                    finish: "Finalizar",
                    next: "Próximo",
                    previous: "Anterior"
                },

                onStepChanging: function (event, currentIndex, newIndex) {
                    //Permitindo que o usuário possa voltar, mesmo que o passo atual esteja inválido
                    if (currentIndex > newIndex) {
                        return true;
                    }

                    var form = $('#form-wizard');

                    //Retirando as classes de erro caso o usuário volte o passo
                    if (currentIndex < newIndex) {
                        // To remove error styles
                        $(".body:eq(" + newIndex + ") label.error", form).remove();
                        $(".body:eq(" + newIndex + ") .error", form).removeClass("error");
                        $(".body:eq(" + newIndex + ") .input-validation-error", form).removeClass("error");
                    }

                    //Desabilitando a validação de compos desabilitados ou escondidos
                    form.validate().settings.ignore = ":disabled,:hidden";

                    //Iniciando a validação, prevenindo que o usuário avançe de passo
                    return form.valid();
                },
                onFinishing: function (event, currentIndex) {
                    var form = $('#form-wizard');

                    form.validate().settings.ignore = ":disabled,:hidden";

                    return form.valid();
                },
                onFinished: function (event, currentIndex) {
                    $('#form-wizard').submit();
                    var nome = $("#Nome").val();
                    $("#form-wizard").hide();
                    $("#div-conclusao").show();
                    $("#div-conclusao-nome").text(nome);
                    setTimeout("Refresh()", 5000);
                }
            });
        });

        $("#form-wizard").validate({
            rules: {
                Nome: {
                    required: true,
                },
                Login: {
                    required: true,
                },
                Senha: {
                    required: true,
                },
                Sexo: {
                    required: true,
                },
                DataNascimento: {
                    required: true,
                },
                CPF: {
                    required: true,
                },
                Email: {
                    required: true,
                },
                Endereco: {
                    required: true,
                },
                Numero: {
                    required: true,
                },
                Bairro: {
                    required: true,
                },
                CEP: {
                    required: true,
                },
                CidadeId: {
                    required: true,
                },
                EstadoId: {
                    required: true,
                },
                Telefone: {
                    required: true,
                },
                confirmasenha: {
                    equalTo: "#Senha"
                },
                BancoId: {
                    required: true,
                },
                Titular: {
                    required: true,
                },
                TipoConta: {
                    required: true,
                },
                Agencia: {
                    required: true,
                },
                Conta: {
                    required: true,
                },
                termosuso: {
                    required: true,
                }
            },
            messages: {
                nome: "",
                email: "",
                usuario: "",
                senha: "",
                confirmasenha: "Senhas não conferem.",
                termosuso: "Você deve aceitar para finalizar.",
            },
            highlight: function (element) {
                //adicionar border-color direto no element.id
                $('#' + element.id).addClass('erro');
            },
            unhighlight: function (element) {
                $('#' + element.id).removeClass('erro');
            },
            errorElement: 'span',
            errorClass: 'help-block',
            errorPlacement: function (error, element) {
                if (element.parent('.input-group').length) {
                    error.insertAfter(element.parent());
                } else {
                    error.insertAfter(element);
                }
            }
        });
    </script>

    <script type="text/javaScript">
        function Trim(str) {
            return str.replace(/^\s+|\s+$/g, "");
        }
    </script>

}